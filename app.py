# app.py - O C√©rebro do Nosso Projeto "Ra√≠zes Conectadas"!
# Enzo Aqui √© onde a m√°gica acontece, sabe? A gente conecta o site, o banco e a galera!

# --- Importa√ß√µes Essenciais (Sem isso, nada funciona!) ---
from flask import Flask, render_template, request, redirect, url_for, flash # O Flask em si, e umas ferramentas √∫teis
from flask_wtf import FlaskForm # Pra fazer formul√°rios de um jeito seguro e f√°cil
from wtforms import StringField, EmailField, TelField, TextAreaField, SubmitField # Os tipos de campos dos nossos formul√°rios
from wtforms.validators import DataRequired, Length, Email # Regrinhas pra validar o que o povo digita
from flask_wtf.csrf import CSRFProtect # Prote√ß√£o contra uns ataques chatinhos de formul√°rio

# Ferramentas do Banco de Dados (Pra guardar tudo bonitinho!)
from flask_sqlalchemy import SQLAlchemy # O ORM que ajuda a conversar com o banco sem muito SQL
from flask_migrate import Migrate # Pra gente conseguir mudar o banco de dados sem bagun√ßar tudo depois
# import os # N√£o vamos usar 'os' aqui por enquanto, mas √© bom saber que existe!

# --- Configura√ß√µes Iniciais do Aplicativo (O "DNA" do nosso SITE) ---

app = Flask(__name__) # 

# EM PRODU√á√ÉO: Troca essa aqui por uma gerada de forma super aleat√≥ria e guarda num lugar seguro )!
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'RAIZES_SECRETA_MUITO_ALEATORIA_E_LONGA_ABC123XYZ987KJH654FDGHJ7890PLMNBG54RFVBNGTFRD')
csrf = CSRFProtect(app) # Ativando a prote√ß√£o de formul√°rios com essa chave secreta.

# --- Configura√ß√£o do Banco de Dados PostgreSQL ---
app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://raizes_user:1997xf11ASDF@localhost:5432/raizes_conectadas_db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False # Isso aqui √© pra n√£o gastar mem√≥ria √† toa.

db = SQLAlchemy(app) # Conecta o nosso aplicativo com o Banco de Dados.
migrate = Migrate(app, db) # Prepara o Flask para futuras atualiza√ß√µes no banco

# --- Modelos do Banco de Dados (As "plantas" das nossas tabelas) ---
# Cada classe aqui √© como um tipo de "ficha cadastral" que a gente guarda no banco.

class Escola(db.Model):
    __tablename__ = 'escolas' 
    id = db.Column(db.Integer, primary_key=True) # Um n√∫mero √∫nico pra cada escola (o RG dela no sistema)
    nome_escola = db.Column(db.String(100), nullable=False) 
    cnpj = db.Column(db.String(18), unique=True, nullable=False) 
    endereco = db.Column(db.String(200), nullable=False) 
    responsavel = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False) # E-mail de contato, tem que ser √∫nico e v√°lido
    telefone = db.Column(db.String(15)) # Telefone de contato (com DDD, n√©?,R sim Enzo)
    mensagem = db.Column(db.Text) 

    def __repr__(self):
        return f'<Escola: {self.nome_escola}>'

class Agricultor(db.Model):
    __tablename__ = 'agricultores'
    id = db.Column(db.Integer, primary_key=True) # ID √∫nico do agricultor
    nome_propriedade = db.Column(db.String(100), nullable=False) # O nome do s√≠tio, fazenda, ch√°cara... obrigat√≥rio!
    cpf_cnpj = db.Column(db.String(18), unique=True, nullable=False) 
    endereco = db.Column(db.String(200), nullable=False) 
    responsavel = db.Column(db.String(100), nullable=False) 
    email = db.Column(db.String(120), unique=True, nullable=False) 
    telefone = db.Column(db.String(15)) 
    produtos = db.Column(db.Text, nullable=False) 
    certificacao = db.Column(db.String(100)) # Se ele tem alguma certifica√ß√£o (org√¢nico, etc., n√£o esquece de criar as abas de exemplo)
    mensagem = db.Column(db.Text) 

    def __repr__(self):
        # Pra identificar um agricultor quando o c√≥digo mostrar ele.OBS: Estava dando erro enzo, se ja ajeitou beleza
        return f'<Agricultor: {self.nome_propriedade}>'

# --- Defini√ß√£o dos Formul√°rios (Flask-WTF) (As "fichas" que o usu√°rio preenche) ---
# Usamos o Flask-WTF pra garantir que o formul√°rio √© seguro e validado / Ta bom, n√£o esquece de testa em a√ß√£o.

class CadastroEscolaForm(FlaskForm):
    # Campos para o formul√°rio de cadastro de escolas
    nome_escola = StringField('Nome da Escola', validators=[DataRequired('O nome da escola √© essencial!'), Length(max=100, message='Nome da escola muito longo.')])
    cnpj = StringField('CNPJ', validators=[DataRequired('Precisamos do CNPJ da escola.'), Length(min=14, max=18, message='CNPJ inv√°lido (min 14, max 18 caracteres).')])
    endereco = StringField('Endere√ßo Completo', validators=[DataRequired('O endere√ßo √© fundamental para nos localizarmos!'), Length(max=200, message='Endere√ßo muito longo.')])
    responsavel = StringField('Nome do Respons√°vel', validators=[DataRequired('Por favor, informe o nome do respons√°vel.'), Length(max=100, message='Nome do respons√°vel muito longo.')])
    email = EmailField('Email de Contato', validators=[DataRequired('Um e-mail √© crucial para entrarmos em contato!'), Email('Por favor, digite um e-mail v√°lido.'), Length(max=120, message='E-mail muito longo.')])
    telefone = TelField('Telefone (DDD+N√∫mero)', validators=[DataRequired('Um telefone para contato √© importante!'), Length(min=10, max=15, message='Telefone inv√°lido (min 10, max 15 caracteres).')])
    mensagem = TextAreaField('Algo mais que queira dizer? (Opcional)') # Mensagem adicional, n√£o obrigat√≥ria
    submit = SubmitField('Cadastrar Escola') # O bot√£o que envia tudo! / Tu n√£o esquece de tirar essas observa√ß√µes, pra depois n√£o ficarem pensando besteira. deixa so o importante

class CadastroAgricultorForm(FlaskForm):
    # Campos para o formul√°rio de cadastro de agricultores
    nome_propriedade = StringField('Nome da Propriedade / S√≠tio', validators=[DataRequired('Qual o nome da sua propriedade? √â importante!'), Length(max=100, message='Nome da propriedade muito longo.')])
    cpf_cnpj = StringField('CPF ou CNPJ', validators=[DataRequired('Seu CPF ou CNPJ √© obrigat√≥rio para o cadastro.'), Length(min=11, max=18, message='CPF/CNPJ inv√°lido (min 11, max 18 caracteres).')])
    endereco = StringField('Endere√ßo da Propriedade', validators=[DataRequired('Precisamos saber onde fica sua propriedade!'), Length(max=200, message='Endere√ßo da propriedade muito longo.')])
    responsavel = StringField('Seu Nome (Respons√°vel pela Produ√ß√£o)', validators=[DataRequired('Por favor, informe o seu nome.'), Length(max=100, message='Nome do respons√°vel muito longo.')])
    email = EmailField('Seu Email', validators=[DataRequired('Um e-mail para contato √© essencial!'), Email('Por favor, digite um e-mail v√°lido.'), Length(max=120, message='E-mail muito longo.')])
    telefone = TelField('Seu Telefone (DDD+N√∫mero)', validators=[DataRequired('Seu telefone para contato √© importante!'), Length(min=10, max=15, message='Telefone inv√°lido (min 10, max 15 caracteres).')])
    produtos = TextAreaField('Quais produtos voc√™ oferece? (Ex: Alface, Tomate, Ovos Caipira)', validators=[DataRequired('Conte-nos sobre seus produtos, por favor!')])
    certificacao = StringField('Tem alguma certifica√ß√£o? (Ex: Org√¢nico, Agroecol√≥gico)', validators=[Length(max=100, message='Certifica√ß√£o muito longa.')])
    mensagem = TextAreaField('Alguma mensagem extra para a equipe Ra√≠zes Conectadas? (Opcional)') # Mensagem adicional, n√£o obrigat√≥ria
    submit = SubmitField('Cadastrar Produ√ß√£o') # O bot√£o de envio!

# --- Rotas do Aplicativo (Os "caminhos" do nosso site) ---
# Cada fun√ß√£o aqui √© uma "parada" que o usu√°rio pode fazer no site./Enzo kkkk, os icones, vai deixa?

@app.route('/') # A nossa porta de entrada!
def index():
    print("‚ú® Algu√©m acabou de chegar na p√°gina inicial! Seja bem-vindo(a)! ‚ú®")
    return render_template('index.html') # Carrega a p√°gina principal.

@app.route('/escolas.html') # Caminho para a p√°gina das escolas
def escolas_page():
    print("üè´ Ops! Parece que uma escola est√° querendo se cadastrar. Mostrando o formul√°rio...")
    form_escola = CadastroEscolaForm() # Prepara o formul√°rio vazio para a escola preencher.
    return render_template('escolas.html', form_escola=form_escola) 

@app.route('/agricultores.html') # Caminho para a p√°gina dos agricultores
def agricultores_page():
    print("üå± Um agricultor visitou a p√°gina! Hora de mostrar as oportunidades de cadastro.")
    form_agricultor = CadastroAgricultorForm() # Prepara o formul√°rio vazio para o agricultor.
    return render_template('agricultores.html', form_agricultor=form_agricultor) 

# --- Rotas de Cadastro (√â AQUI QUE A GENTE SALVA OS DADOS NO BANCO!) // Enzo muito provavel n√£o vai da tempo e vamos ter que criar no googlesite, entao arrisca esse mesmo---

@app.route('/cadastro_escola', methods=['POST']) # Quando o formul√°rio da escola √© ENVIADO (m√©todo POST)
def processa_cadastro_escola(): # Renomeei a fun√ß√£o para evitar conflito com a rota GET / N√£o esquce
    print("‚úâÔ∏è Recebi um formul√°rio de cadastro de escola! Vamos ver se est√° tudo certo...")
    form_escola = CadastroEscolaForm() 
    if form_escola.validate_on_submit(): 
        print("‚úÖ Formul√°rio da escola validado com sucesso! Agora √© com o banco de dados...")
        try:
            nova_escola = Escola( 
                nome_escola=form_escola.nome_escola.data,
                cnpj=form_escola.cnpj.data,
                endereco=form_escola.endereco.data,
                responsavel=form_escola.responsavel.data,
                email=form_escola.email.data,
                telefone=form_escola.telefone.data,
                mensagem=form_escola.mensagem.data
            )
            db.session.add(nova_escola) 
            db.session.commit() 

            print(f"üéâ Escola '{nova_escola.nome_escola}' cadastrada com sucesso no DB! CNPJ: {nova_escola.cnpj}")
            flash('Sua escola foi cadastrada com sucesso! Em breve entraremos em contato.', 'success') # Mensagem de sucesso para o usu√°rio
            return redirect(url_for('cadastro_sucesso')) 

        except Exception as e:
            # algo deu errado na hora de salvar no banco!, // Enzo eu n√£o criei a VPN ainda para leva ao banco. tera que fica local, meu pc ta cheio
            db.session.rollback() # Desfaz qualquer coisa que tenha sido feita no banco (pra n√£o dar bagun√ßa)
            print(f"‚ùå ERRO ao salvar a escola no banco de dados: {e}")
            flash(f'Puxa! N√£o conseguimos cadastrar sua escola agora. Tente novamente mais tarde, por favor. Erro: {e}', 'error') 
            return render_template('escolas.html', form_escola=form_escola) 

    else: # Se o formul√°rio n√£o passou na valida√ß√£o (algum campo faltando, e-mail errado, etc.)
        print("‚ö†Ô∏è Formul√°rio da escola com erros. Mostrando a p√°gina de novo com as corre√ß√µes necess√°rias.")
        # O Flask-WTF j√° vai se virar pra mostrar os erros ao lado dos campos.
        return render_template('escolas.html', form_escola=form_escola)

@app.route('/cadastro_agricultor', methods=['POST']) # Quando o formul√°rio do agricultor √© ENVIADO
def processa_cadastro_agricultor(): # Renomeei a fun√ß√£o tamb√©m!
    print("‚úâÔ∏è Recebi um formul√°rio de cadastro de agricultor! Vamos conferir...")
    form_agricultor = CadastroAgricultorForm() # Pega os dados do formul√°rio.
    if form_agricultor.validate_on_submit(): # Valida!
        print("‚úÖ Formul√°rio do agricultor validado! Preparando para salvar no banco...")
        try:
            novo_agricultor = Agricultor( # Cria um novo registro de agricultor
                nome_propriedade=form_agricultor.nome_propriedade.data,
                cpf_cnpj=form_agricultor.cpf_cnpj.data,
                endereco=form_agricultor.endereco.data,
                responsavel=form_agricultor.responsavel.data,
                email=form_agricultor.email.data,
                telefone=form_agricultor.telefone.data,
                produtos=form_agricultor.produtos.data,
                certificacao=form_agricultor.certificacao.data,
                mensagem=form_agricultor.mensagem.data
            )
            db.session.add(novo_agricultor) # Adiciona √† fila de salvamento
            db.session.commit() # Salva de verdade no banco

            print(f"üéâ Agricultor '{novo_agricultor.nome_propriedade}' cadastrado com sucesso no DB! Produtos: {novo_agricultor.produtos}")
            flash('Sua produ√ß√£o foi cadastrada com sucesso! Em breve entraremos em contato.', 'success') # Mensagem de sucesso
            return redirect(url_for('cadastro_sucesso')) # Redireciona para o agradecimento!

        except Exception as e:
            db.session.rollback() # Desfaz se deu erro!
            print(f"‚ùå ERRO ao salvar o agricultor no banco de dados: {e}")
            flash(f'Puxa! N√£o conseguimos cadastrar sua produ√ß√£o agora. Tente novamente mais tarde, por favor. Erro: {e}', 'error') # Mensagem de erro
            return render_template('agricultores.html', form_agricultor=form_agricultor)

    else: # Se o formul√°rio do agricultor tiver erros
        print("‚ö†Ô∏è Formul√°rio do agricultor com erros. Mostrando a p√°gina de novo com as corre√ß√µes necess√°rias.")
        return render_template('agricultores.html', form_agricultor=form_agricultor)

@app.route('/cadastro_sucesso') 
def cadastro_sucesso():
    print("üíñ Redirecionado para a p√°gina de sucesso/agradecimento. Miss√£o cumprida!")
    return render_template('agradecimento.html') 

# --- Roda o Aplicativo (O "start" do nosso projeto!) ---
if __name__ == '__main__': 
    # Lembrete pro futuro: Com Flask-Migrate, a gente n√£o usa mais db.create_all() aqui.
    # O banco √© criado e atualizado com os comandos 'flask db migrate' e 'flask db upgrade' no terminal.
    # Isso √© algo que a gente vai colocar depois de um tempo! ;)
    app.run(debug=True) 
                       
                        # Enzo NUNCA use debug=True em produ√ß√£o, ok? √â perigoso!
